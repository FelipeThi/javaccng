/**
 * If you have designed your tokens well, the token manager
 * is never expected to throw this exception.
 * Therefore it extends Error rather than Exception.
 */
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class TokenManagerError extends Error {
/** lexical error occurred. */
  public static final int LEXICAL_ERROR = 0;

  /** Tried to change to an invalid lexical state. */
  public static final int INVALID_LEXICAL_STATE = 2;

  /** Detected (and bailed out of) an infinite loop in the token manager. */
  public static final int LOOP_DETECTED = 3;

  /**
   * Indicates the reason why the exception is thrown. It will have
   * one of the above 4 values.
   */
  private final int errorCode;

  /** Constructor with message and reason. */
  public TokenManagerError(String message, int errorCode) {
    super(message);
    this.errorCode = errorCode;
  }

  /**
   * Full Constructor.
   *
   * @param eof      Indicates if EOF caused the lexical error.
   * @param lexState Lexical state in which this error occurred.
   * @param line     Line number when the error occurred.
   * @param column   Column number when the error occurred.
   * @param prefix   Prefix that was seen before this error occurred.
   * @param curChar  The offending character.
   */
  public TokenManagerError(boolean eof, int lexState, int line, int column, String prefix, int curChar, int errorCode) {
    this(lexicalError(eof, lexState, line, column, prefix, curChar), errorCode);
  }

  /**
   * Gets error code.
   *
   * @return The reason why this exception has been thrown.
   */
  public int getErrorCode() {
    return errorCode;
  }

  /**
   * You can also modify the body of this method to customize your error messages.
   * For example, cases like LOOP_DETECTED and INVALID_LEXICAL_STATE are not
   * of end-users concern, so you can return something like :
   *
   * "Internal Error : Please file a bug report .... "
   *
   * from this method for such cases in the release version of your parser.
   *
   * @return Descriptive error message.
   */
  public String getMessage() {
    return super.getMessage();
  }

  /**
   * Returns a detailed message for the Error when it is thrown by the
   * token manager to indicate a lexical error.
   *
   * @param eof      Indicates if EOF caused the lexical error.
   * @param lexState Lexical state in which this error occurred.
   * @param line     Line number when the error occurred.
   * @param column   Column number when the error occurred.
   * @param prefix   Prefix that was seen before this error occurred.
   * @param curChar  The offending character.
   */
  static String lexicalError(boolean eof, int lexState, int line, int column, String prefix, int curChar) {
    return "Lexical error at line " +
        line + ", column " +
        column + ".  Encountered: " +
        (eof ? "<EOF> " : "\"" + escape(String.valueOf(curChar)) + "\"" + " (" + curChar + "), ") +
        "after : \"" + escape(prefix) + "\"";
  }

  /**
   * Replaces unprintable characters by their escaped (or unicode escaped)
   * equivalents in the given string
   */
  static String escape(final String string) {
    final StringBuffer b = new StringBuffer(string.length());
    char ch;
    for (int i = 0; i < string.length(); i++) {
      switch (string.charAt(i)) {
        case 0:
          continue;
        case '\b':
          b.append("\\b");
          continue;
        case '\t':
          b.append("\\t");
          continue;
        case '\n':
          b.append("\\n");
          continue;
        case '\f':
          b.append("\\f");
          continue;
        case '\r':
          b.append("\\r");
          continue;
        case '\"':
          b.append("\\\"");
          continue;
        case '\'':
          b.append("\\\'");
          continue;
        case '\\':
          b.append("\\\\");
          continue;
        default:
          if ((ch = string.charAt(i)) < 0x20 || ch > 0x7e) {
            final String s = "0000" + Integer.toString(ch, 16);
            b.append("\\u").append(s.substring(s.length() - 4, s.length()));
          }
          else {
            b.append(ch);
          }
          continue;
      }
    }
    return b.toString();
  }
}