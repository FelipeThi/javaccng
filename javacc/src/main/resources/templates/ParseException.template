/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public class ParseException extends Exception {
  private final Token currentToken;
  private final int[][] expectedTokenSequences;

  /** Constructor with message. */
  public ParseException(String message) {
    super(message);
    currentToken = null;
    expectedTokenSequences = null;
  }

  /**
   * This constructor is used by the method "generateParseException"
   * in the generated parser.  Calling this constructor generates
   * a new object of this type with the fields "currentToken",
   * "expectedTokenSequences", and "tokenImage" set.
   *
   * @param currentToken           The last successfully consumed token.
   * @param expectedTokenSequences What token kinds expected after
   *                               the current token.
   */
  public ParseException(Token currentToken,
                        int[][] expectedTokenSequences,
                        String[] tokenImage) {
    super(generateMessage(currentToken, expectedTokenSequences, tokenImage));
    this.currentToken = currentToken;
    this.expectedTokenSequences = expectedTokenSequences;
  }

  /**
   * Get the last token that has been consumed successfully.  If
   * this object has been created due to a parse error, the token
   * following this token will (therefore) be the first error token.
   *
   * @return The last successfully consumed token.
   */
  public Token getCurrentToken() {
    return currentToken;
  }

  /**
   * Each nested array of integers represents a sequence of tokens
   * (by their ordinal values) that is expected at this point of the parse.
   *
   * @return What token kinds expected after the current successfully parsed token.
   */
  public int[][] getExpectedTokenSequences() {
    return expectedTokenSequences;
  }

  /**
   * It uses {@link #currentToken} and {@link #expectedTokenSequences} to generate
   * a parse error message.  If this object has been created due to a parse error,
   * and you do not catch it (it gets thrown * from the parser) the correct
   * error message gets displayed.
   */
  private static String generateMessage(Token currentToken,
                                        int[][] expectedTokenSequences,
                                        String[] tokenImage) {
    StringBuilder s = new StringBuilder();
    int max = 0;
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      max = Math.max(max, expectedTokenSequences[i].length);
    }
    s.append("Encountered: ");
    Token t = currentToken.next;
    int n = 0;
    while (t != null & n < max) {
      if (n > 0) {
        s.append(", ");
      }
      s.append(tokenImage[t.getKind()]);
      if (t.getKind() == 0) {
        break;
      }
      t = t.next;
      n++;
    }
#if KEEP_LINE_COLUMN
    s.append(" at line ")
        .append(currentToken.next.getLine())
        .append(", column ").append(currentToken.next.getColumn());
#fi
    s.append(".\n");
    if (expectedTokenSequences.length == 1) {
      s.append("Was expecting:\n");
    }
    else {
      s.append("Was expecting one of:\n");
    }
    for (int i = 0; i < expectedTokenSequences.length; i++) {
      int length = expectedTokenSequences[i].length;
      if (i > 0) {
        s.append("\n");
      }
      s.append("   ");
      for (int j = 0; j < length; j++) {
        if (j > 0) {
          s.append(", ");
        }
        s.append(tokenImage[expectedTokenSequences[i][j]]);
      }
      if (expectedTokenSequences[i][length - 1] != 0) {
        s.append("...");
      }
    }
    return s.toString();
  }
}
