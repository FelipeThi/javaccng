#if NODE_EXTENDS
public class SimpleNode extends ${NODE_EXTENDS} implements Node {
#else
public class SimpleNode implements Node {
#fi
#if NODE_USES_PARSER
  protected ${PARSER_NAME} parser;
#fi
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
#if TRACK_TOKENS
  protected Token firstToken;
  protected Token lastToken;
#fi

  public SimpleNode(int id) {
    this.id = id;
  }
#if NODE_USES_PARSER

  public SimpleNode(${PARSER_NAME} p, int id) {
    this(id);
    parser = p;
  }
#fi
#if NODE_FACTORY

  public static Node jjtCreate(int id) {
    return new SimpleNode(id);
  }

#if NODE_USES_PARSER
  public static Node jjtCreate(${PARSER_NAME} p, int id) {
    return new SimpleNode(p, id);
  }
#fi
#fi

  public void jjtOpen() {}

  public void jjtClose() {}

  public void jjtSetParent(Node n) {
    parent = n;
  }

  public Node jjtGetParent() {
    return parent;
  }

  public void jjtSetChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    }
    else if (i >= children.length) {
      Node[] c = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetChildCount() {
    return children == null ? 0 : children.length;
  }

  public void jjtSetValue(Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return value;
  }
#if TRACK_TOKENS

  public Token jjtGetFirstToken() {
    return firstToken;
  }

  public Token jjtGetLastToken() {
    return lastToken;
  }

  public void jjtSetTokens(Token firstToken, Token lastToken) {
    this.firstToken = firstToken;
    this.lastToken = lastToken;
  }
#fi
#if VISITOR

#if VISITOR_EXCEPTION
  public ${VISITOR_RETURN_TYPE} jjtAccept(${VISITOR_TYPE} visitor, ${VISITOR_DATA_TYPE:-Object} data)
      throws ${VISITOR_EXCEPTION} {
#else
  public ${VISITOR_RETURN_TYPE} jjtAccept(${VISITOR_TYPE} visitor, ${VISITOR_DATA_TYPE:-Object} data) {
#fi
#if VISITOR_RETURN_TYPE_VOID
    visitor.visit(this, data);
#else
    return visitor.visit(this, data);
#fi
  }

#if VISITOR_EXCEPTION
  public Object childrenAccept(${VISITOR_TYPE} visitor, ${VISITOR_DATA_TYPE:-Object} data)
      throws ${VISITOR_EXCEPTION} {
#else
  public Object childrenAccept(${VISITOR_TYPE} visitor, ${VISITOR_DATA_TYPE:-Object} data) {
#fi
    if (children != null) {
      for (Node child : children) {
        child.jjtAccept(visitor, data);
      }
    }
    return data;
  }
#fi

  public String toString() {
    return ${TREE_CONSTANTS_TYPE}.jjtNodeName[id];
  }

  public void dump(String prefix) {
    System.out.print(prefix);
    System.out.print(toString());
    System.out.println();
    if (children != null) {
      for (Node child : children) {
        SimpleNode n = (SimpleNode) child;
        if (n != null) {
          n.dump(prefix + "  ");
        }
      }
    }
  }
}

