/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
${SUPPORT_CLASS_VISIBILITY_PUBLIC?public :}class SimpleCharStream implements CharStream {
  int bufSize;
  int available;
  int tokenBegin;
/** Position in buffer. */
  public int bufPos = -1;
#if KEEP_LINE_COLUMN
  protected int bufLine[];
  protected int bufColumn[];

  protected int column = 0;
  protected int line = 1;

  protected boolean prevCharIsCR = false;
  protected boolean prevCharIsLF = false;
#fi

  protected java.io.Reader inputStream;

  protected char[] buffer;
  protected int maxNextCharInd = 0;
  protected int inBuf = 0;
  protected int tabSize = 8;

  protected void setTabSize(int i) { tabSize = i; }
  protected int getTabSize(int i) { return tabSize; }

  protected void expandBuff(boolean wrapAround) {
    char[] newBuffer = new char[bufSize + 2048];
#if KEEP_LINE_COLUMN
    int newBufLine[] = new int[bufSize + 2048];
    int newBufColumn[] = new int[bufSize + 2048];
#fi

    try {
     if (wrapAround) {
        System.arraycopy(buffer, tokenBegin, newBuffer, 0, bufSize - tokenBegin);
        System.arraycopy(buffer, 0, newBuffer, bufSize - tokenBegin, bufPos);
        buffer = newBuffer;
#if KEEP_LINE_COLUMN

        System.arraycopy(bufLine, tokenBegin, newBufLine, 0, bufSize - tokenBegin);
        System.arraycopy(bufLine, 0, newBufLine, bufSize - tokenBegin, bufPos);
        bufLine = newBufLine;

        System.arraycopy(bufColumn, tokenBegin, newBufColumn, 0, bufSize - tokenBegin);
        System.arraycopy(bufColumn, 0, newBufColumn, bufSize - tokenBegin, bufPos);
        bufColumn = newBufColumn;
#fi

        maxNextCharInd = (bufPos += (bufSize - tokenBegin));
      }
      else {
        System.arraycopy(buffer, tokenBegin, newBuffer, 0, bufSize - tokenBegin);
        buffer = newBuffer;
#if KEEP_LINE_COLUMN

        System.arraycopy(bufLine, tokenBegin, newBufLine, 0, bufSize - tokenBegin);
        bufLine = newBufLine;

        System.arraycopy(bufColumn, tokenBegin, newBufColumn, 0, bufSize - tokenBegin);
        bufColumn = newBufColumn;
#fi

        maxNextCharInd = (bufPos -= tokenBegin);
      }
    }
    catch (Throwable t) {
      throw new Error(t.getMessage());
    }

    bufSize += 2048;
    available = bufSize;
    tokenBegin = 0;
  }

  protected void fillBuff() throws java.io.IOException {
    if (maxNextCharInd == available) {
      if (available == bufSize) {
        if (tokenBegin > 2048) {
          bufPos = maxNextCharInd = 0;
          available = tokenBegin;
        }
        else if (tokenBegin < 0)
          bufPos = maxNextCharInd = 0;
        else
          expandBuff(false);
      }
      else if (available > tokenBegin)
        available = bufSize;
      else if ((tokenBegin - available) < 2048)
        expandBuff(true);
      else
        available = tokenBegin;
    }

    int i;
    try {
      if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
        inputStream.close();
        throw new java.io.IOException();
      }
      else
        maxNextCharInd += i;
      return;
    }
    catch(java.io.IOException e) {
      --bufPos;
      backup(0);
      if (tokenBegin == -1)
        tokenBegin = bufPos;
      throw e;
    }
  }

/** Start. */
  public char beginToken() throws java.io.IOException {
    tokenBegin = -1;
    char c = readChar();
    tokenBegin = bufPos;

    return c;
  }
#if KEEP_LINE_COLUMN

  protected void updateLineColumn(char c) {
    column++;

    if (prevCharIsLF) {
      prevCharIsLF = false;
      line += (column = 1);
    }
    else if (prevCharIsCR) {
      prevCharIsCR = false;
      if (c == '\n') {
        prevCharIsLF = true;
      }
      else
        line += (column = 1);
    }

    switch (c) {
      case '\r' :
        prevCharIsCR = true;
        break;
      case '\n' :
        prevCharIsLF = true;
        break;
      case '\t' :
        column--;
        column += (tabSize - (column % tabSize));
        break;
      default :
        break;
    }

    bufLine[bufPos] = line;
    bufColumn[bufPos] = column;
  }
#fi

/** Read a character. */
  public char readChar() throws java.io.IOException {
    if (inBuf > 0) {
      --inBuf;

      if (++bufPos == bufSize)
        bufPos = 0;

      return buffer[bufPos];
    }

    if (++bufPos >= maxNextCharInd)
      fillBuff();

    char c = buffer[bufPos];

#if KEEP_LINE_COLUMN
    updateLineColumn(c);
#fi
    return c;
  }

  /** Get token end column number. */
  public int getEndColumn() {
#if KEEP_LINE_COLUMN
    return bufColumn[bufPos];
#else
    return -1;
#fi
  }

  /** Get token end line number. */
  public int getEndLine() {
#if KEEP_LINE_COLUMN
     return bufLine[bufPos];
#else
    return -1;
#fi
  }

  /** Get token beginning column number. */
  public int getBeginColumn() {
#if KEEP_LINE_COLUMN
    return bufColumn[tokenBegin];
#else
    return -1;
#fi
  }

  /** Get token beginning line number. */
  public int getBeginLine() {
#if KEEP_LINE_COLUMN
    return bufLine[tokenBegin];
#else
    return -1;
#fi
  }

/** Backup a number of characters. */
  public void backup(int amount) {
    inBuf += amount;
    if ((bufPos -= amount) < 0)
      bufPos += bufSize;
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader reader, int startLine, int startColumn, int bufferSize) {
    inputStream = reader;
#if KEEP_LINE_COLUMN
    line = startLine;
    column = startColumn - 1;
#fi

    available = bufSize = bufferSize;
    buffer = new char[bufferSize];
#if KEEP_LINE_COLUMN
    bufLine = new int[bufferSize];
    bufColumn = new int[bufferSize];
#fi
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader reader, int startLine, int startColumn) {
    this(reader, startLine, startColumn, 4096);
  }

  /** Constructor. */
  public SimpleCharStream(java.io.Reader reader) {
    this(reader, 1, 1, 4096);
  }

  /** Get token literal value. */
  public String getImage() {
    if (bufPos >= tokenBegin)
      return new String(buffer, tokenBegin, bufPos - tokenBegin + 1);
    else
      return new String(buffer, tokenBegin, bufSize - tokenBegin) + new String(buffer, 0, bufPos + 1);
  }

  /** Get the suffix. */
  public char[] getSuffix(int len) {
    char[] ret = new char[len];

    if ((bufPos + 1) >= len)
      System.arraycopy(buffer, bufPos - len + 1, ret, 0, len);
    else {
      System.arraycopy(buffer, bufSize - (len - bufPos - 1), ret, 0, len - bufPos - 1);
      System.arraycopy(buffer, 0, ret, len - bufPos - 1, bufPos + 1);
    }

    return ret;
  }

  /** Reset buffer when finished. */
  public void close() {
    buffer = null;
#if KEEP_LINE_COLUMN
    bufLine = null;
    bufColumn = null;
#fi
  }
#if KEEP_LINE_COLUMN

  /**
   * Method to adjust line and column numbers for the start of a token.
   */
  public void adjustBeginLineColumn(int newLine, int newColumn) {
    int start = tokenBegin;
    int len;

    if (bufPos >= tokenBegin) {
      len = bufPos - tokenBegin + inBuf + 1;
    }
    else {
      len = bufSize - tokenBegin + bufPos + 1 + inBuf;
    }

    int i = 0, j = 0, k = 0;
    int nextColDiff = 0, columnDiff = 0;

    while (i < len && bufLine[j = start % bufSize] == bufLine[k = ++start % bufSize]) {
      bufLine[j] = newLine;
      nextColDiff = columnDiff + bufColumn[k] - bufColumn[j];
      bufColumn[j] = newColumn + columnDiff;
      columnDiff = nextColDiff;
      i++;
    }

    if (i < len) {
      bufLine[j] = newLine++;
      bufColumn[j] = newColumn + columnDiff;

      while (i++ < len) {
        if (bufLine[j = start % bufSize] != bufLine[++start % bufSize])
          bufLine[j] = newLine++;
        else
          bufLine[j] = newLine;
      }
    }

    line = bufLine[j];
    column = bufColumn[j];
  }

#fi
}
