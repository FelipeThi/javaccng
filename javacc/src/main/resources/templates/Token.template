/** Describes the input token stream. */
#if TOKEN_EXTENDS
public class Token extends ${TOKEN_EXTENDS} implements java.io.Serializable {
#else
public class Token implements java.io.Serializable {
#fi
  private int kind;
  private final int begin;
  private final int end;
#if KEEP_LINE_COLUMN
  private int line;
  private int column;
#fi
#if KEEP_IMAGE
  private String image;
#fi

  /**
   * A reference to the next regular (non-special) token from the input
   * stream.  If this is the last token from the input stream, or if the
   * scanner has not read tokens beyond this one, this field is
   * set to null.  This is true only if this token is also a regular
   * token.  Otherwise, see below for a description of the contents of
   * this field.
   */
  public Token next;

  /**
   * This field is used to access special tokens that occur prior to this
   * token, but after the immediately preceding regular (non-special) token.
   * If there are no such special tokens, this field is set to null.
   * When there are more than one such special token, this field refers
   * to the last of these special tokens, which in turn refers to the next
   * previous special token through its specialToken field, and so on
   * until the first special token (whose specialToken field is null).
   * The next fields of special tokens refer to other special tokens that
   * immediately follow it (without an intervening regular token).  If there
   * is no such token, this field is null.
   */
  public Token specialToken;

  public Token(int kind, int begin, int end) {
#if KEEP_IMAGE
    this(kind, begin, end, null);
#else
    if (begin > end) { throw new IllegalArgumentException(); }
    this.kind = kind;
    this.begin = begin;
    this.end = end;
#fi
  }
#if KEEP_IMAGE

  public Token(int kind, int begin, int end, String image) {
    if (begin > end) { throw new IllegalArgumentException(); }
    this.kind = kind;
    this.begin = begin;
    this.end = end;
    this.image = image;
  }
#fi

  /** @return Token kind. */
  public int getKind() {
    return kind;
  }

  /** @param kind New token kind. */
  public void setKind(int kind) {
    this.kind = kind;
  }
#if KEEP_IMAGE

  /** @return Token image. */
  public String getImage() {
    return image;
  }

  /** @param image New token image. */
  public void setImage(String image) {
    this.image = image;
  }
#fi

  /** @return Index of the first character of the token, inclusive. */
  public int getBegin() {
    return begin;
  }

  /** @return Index of the last character of the token, exclusive. */
  public int getEnd() {
    return end;
  }

#if KEEP_LINE_COLUMN

  /** @return The line number of the first character of this token. */
  public int getLine() {
    return line;
  }

  /** @return The column number of the first character of this token. */
  public int getColumn() {
    return column;
  }

  /**
   * Set token line and column numbers.
   *
   * @param line   The line number of the first character of this token
   * @param column The column number of the first character of this token.
   */
  public void setLineColumn(int line, int column) {
    this.line = line;
    this.column = column;
  }
#fi

  /** @return The image. */
  public String toString() {
#if KEEP_IMAGE
    return image;
#else
    return String.valueOf(kind);
#fi
  }
#if KEEP_IMAGE

  public static Token newToken(int kind, int begin, int end, String image) {
    switch(kind) {
      default:
        return new Token(kind, begin, end, image);
    }
  }
#else

  public static Token newToken(int kind, int begin, int end) {
    switch(kind) {
      default:
        return new Token(kind, begin, end);
    }
  }
#fi
}
