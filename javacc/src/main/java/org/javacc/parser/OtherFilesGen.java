/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.javacc.parser;

import org.javacc.utils.io.IndentingPrintWriter;

import java.util.ArrayList;
import java.util.List;

/**
 * Generates the Constants file.
 */
public class OtherFilesGen implements JavaCCParserConstants {

  public boolean keepLineCol;
  public void start(LexGen lexGen) throws MetaParseException {

    Token t = null;
    keepLineCol = Options.getKeepLineColumn();

    if (JavaCCErrors.get_error_count() != 0) throw new MetaParseException();

    final JavaFiles javaFiles = new JavaFiles();
    javaFiles.gen_TokenMgrError();
    javaFiles.gen_ParseException();
    javaFiles.gen_Token();
    javaFiles.gen_TokenManager();
    javaFiles.gen_CharStream();
    if (Options.getJavaUnicodeEscape()) {
      javaFiles.gen_JavaCharStream();
    }
    else {
      javaFiles.gen_SimpleCharStream();
    }

    try {
      ostr = new IndentingPrintWriter(
                new java.io.BufferedWriter(
                   new java.io.FileWriter(
                     new java.io.File(Options.getOutputDirectory(), JavaCCGlobals.cu_name + "Constants.java")
                   ),
                   8192
                )
             );
    } catch (java.io.IOException e) {
      JavaCCErrors.semantic_error("Could not open file " + JavaCCGlobals.cu_name + "Constants.java for writing.");
      throw new Error();
    }

    List tn = new ArrayList(JavaCCGlobals.toolNames);
    tn.add(JavaCCGlobals.toolName);
    ostr.println("/* " + JavaCCGlobals.getIdString(tn, JavaCCGlobals.cu_name + "Constants.java") + " */");

    if (JavaCCGlobals.cu_to_insertion_point_1.size() != 0 &&
        ((Token) JavaCCGlobals.cu_to_insertion_point_1.get(0)).getKind() == PACKAGE
       ) {
      for (int i = 1; i < JavaCCGlobals.cu_to_insertion_point_1.size(); i++) {
        if (((Token) JavaCCGlobals.cu_to_insertion_point_1.get(i)).getKind() == SEMICOLON) {
          JavaCCGlobals.printTokenSetup((Token)(JavaCCGlobals.cu_to_insertion_point_1.get(0)));
          for (int j = 0; j <= i; j++) {
            t = (Token)(JavaCCGlobals.cu_to_insertion_point_1.get(j));
            JavaCCGlobals.printToken(t, ostr);
          }
          JavaCCGlobals.printTrailingComments(t, ostr);
          ostr.println("");
          ostr.println("");
          break;
        }
      }
    }
    ostr.println("");
    ostr.println("/**");
    ostr.println(" * Token literal values and constants.");
    ostr.println(" * Generated by org.javacc.parser.OtherFilesGen#start()");
    ostr.println(" */");
    if(Options.getSupportClassVisibilityPublic()) {
    	ostr.print("public ");
    }
    ostr.println("interface " + JavaCCGlobals.cu_name + "Constants {");
    ostr.println("");
    RegularExpression re;
    ostr.println("  /** End of File. */");
    ostr.println("  int EOF = 0;");
    for (java.util.Iterator it = JavaCCGlobals.ordered_named_tokens.iterator(); it.hasNext();) {
      re = (RegularExpression)it.next();
      ostr.println("  /** RegularExpression Id. */");
      ostr.println("  int " + re.label + " = " + re.ordinal + ";");
    }
    ostr.println("");
    if (!Options.getUserTokenManager() && Options.getBuildTokenManager()) {
      for (int i = 0; i < lexGen.lexStateName.length; i++) {
        ostr.println("  /** Lexical state. */");
        ostr.println("  int " + lexGen.lexStateName[i] + " = " + i + ";");
      }
      ostr.println("");
    }
    ostr.println("  /** Literal token values. */");
    ostr.println("  String[] tokenImage = {");
    ostr.println("    \"<EOF>\",");

    for (java.util.Iterator it = JavaCCGlobals.rexprlist.iterator(); it.hasNext();) {
      TokenProduction tp = (TokenProduction)(it.next());
      List respecs = tp.respecs;
      for (java.util.Iterator it2 = respecs.iterator(); it2.hasNext();) {
        RegExprSpec res = (RegExprSpec)(it2.next());
        re = res.rexp;
        if (re instanceof RStringLiteral) {
          ostr.println("    \"\\\"" + JavaCCGlobals.add_escapes(JavaCCGlobals.add_escapes(((RStringLiteral)re).image)) + "\\\"\",");
        } else if (!re.label.equals("")) {
          ostr.println("    \"<" + re.label + ">\",");
        } else {
          if (re.tpContext.kind == TokenProduction.TOKEN) {
            JavaCCErrors.warning(re, "Consider giving this non-string token a label for better error reporting.");
          }
          ostr.println("    \"<token of kind " + re.ordinal + ">\",");
        }

      }
    }
    ostr.println("  };");
    ostr.println("");
    ostr.println("}");

    ostr.close();

  }

  private IndentingPrintWriter ostr;

}
