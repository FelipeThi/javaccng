package org.javacc.runtime;

/**
 * This interface describes a character stream that maintains line and
 * column number positions of the characters.  It also has the capability
 * to backup the stream to some extent.  An implementation of this
 * interface is used in the Scanner implementation generated by
 * JavaCCParser.
 *
 * All the methods except backup can be implemented in any fashion. backup
 * needs to be implemented correctly for the correct operation of the lexer.
 * Rest of the methods are all used to get information like line number,
 * column number and the String that constitutes a token and are not used
 * by the lexer. Hence their implementation won't affect the generated lexer's
 * operation.
 */
public interface CharStream extends java.io.Closeable {
  /**
   * Marks the beginning of the next token. It means, the next
   * character returned will belong to the next token.
   * All characters must remain in the buffer between two successive calls
   * to this method to implement backup correctly.
   *
   * @throws java.io.IOException If any I/O error occurs.
   */
  void beginToken() throws java.io.IOException;

  /**
   * Returns the next character from the selected input.  The method
   * of selecting the input is the responsibility of the class
   * implementing this interface.
   *
   * @throws java.io.IOException If any I/O error occurs.
   */
  int readChar() throws java.io.IOException;

  /**
   * Backs up the input stream by amount steps. Lexer calls this method if it
   * had already read some characters, but could not use them to match a
   * (longer) token. So, they will be used again as the prefix of the next
   * token and it is the implemetation's responsibility to do this right.
   */
  void backup(int amount);

  /**
   * Returns a string made up of characters from the marked token beginning
   * to the current buffer position.
   */
  String getImage();

  /**
   * Returns an array of characters that make up the suffix of length 'length' for
   * the currently matched token. This is used to build up the matched string
   * for use in actions in the case of MORE. A simple and inefficient
   * implementation of this is as follows :
   * <pre>
   * CharSequence t = getImage();
   * return t.sunSequence(t.length() - length, t.length()).toString().toCharArray();
   * </pre>
   */
  char[] getSuffix(int length);

  /**
   * Returns index of the first character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getBegin();

  /**
   * Returns index of the last character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getEnd();

  /**
   * Returns the line number of the first character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getBeginLine();

  /**
   * Returns the column number of the first character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getBeginColumn();

  /**
   * Returns the column number of the last character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getEndColumn();

  /**
   * Returns the line number of the last character for current token (being
   * matched after the last call to {@link #beginToken beginToken()}).
   */
  int getEndLine();

  /**
   * The lexer calls this function to indicate that it is done with the stream
   * and hence implementations can free any resources held by this class.
   */
  void close() throws java.io.IOException;
}
